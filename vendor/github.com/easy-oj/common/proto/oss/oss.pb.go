// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oss.proto

package oss

import (
	context "context"
	fmt "fmt"
	base "github.com/easy-oj/common/proto/base"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetObjectReq struct {
	Path                 string        `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	BaseReq              *base.BaseReq `protobuf:"bytes,255,opt,name=base_req,json=baseReq,proto3" json:"base_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetObjectReq) Reset()         { *m = GetObjectReq{} }
func (m *GetObjectReq) String() string { return proto.CompactTextString(m) }
func (*GetObjectReq) ProtoMessage()    {}
func (*GetObjectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f075bf486e7c38, []int{0}
}
func (m *GetObjectReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetObjectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetObjectReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetObjectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetObjectReq.Merge(m, src)
}
func (m *GetObjectReq) XXX_Size() int {
	return m.Size()
}
func (m *GetObjectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetObjectReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetObjectReq proto.InternalMessageInfo

func (m *GetObjectReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GetObjectReq) GetBaseReq() *base.BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

type GetObjectResp struct {
	Object               []byte         `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	BaseResp             *base.BaseResp `protobuf:"bytes,255,opt,name=base_resp,json=baseResp,proto3" json:"base_resp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetObjectResp) Reset()         { *m = GetObjectResp{} }
func (m *GetObjectResp) String() string { return proto.CompactTextString(m) }
func (*GetObjectResp) ProtoMessage()    {}
func (*GetObjectResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f075bf486e7c38, []int{1}
}
func (m *GetObjectResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetObjectResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetObjectResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetObjectResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetObjectResp.Merge(m, src)
}
func (m *GetObjectResp) XXX_Size() int {
	return m.Size()
}
func (m *GetObjectResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetObjectResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetObjectResp proto.InternalMessageInfo

func (m *GetObjectResp) GetObject() []byte {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *GetObjectResp) GetBaseResp() *base.BaseResp {
	if m != nil {
		return m.BaseResp
	}
	return nil
}

type PutObjectReq struct {
	Path                 string        `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Object               []byte        `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	BaseReq              *base.BaseReq `protobuf:"bytes,255,opt,name=base_req,json=baseReq,proto3" json:"base_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PutObjectReq) Reset()         { *m = PutObjectReq{} }
func (m *PutObjectReq) String() string { return proto.CompactTextString(m) }
func (*PutObjectReq) ProtoMessage()    {}
func (*PutObjectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f075bf486e7c38, []int{2}
}
func (m *PutObjectReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutObjectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutObjectReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutObjectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutObjectReq.Merge(m, src)
}
func (m *PutObjectReq) XXX_Size() int {
	return m.Size()
}
func (m *PutObjectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PutObjectReq.DiscardUnknown(m)
}

var xxx_messageInfo_PutObjectReq proto.InternalMessageInfo

func (m *PutObjectReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *PutObjectReq) GetObject() []byte {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *PutObjectReq) GetBaseReq() *base.BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

type PutObjectResp struct {
	BaseResp             *base.BaseResp `protobuf:"bytes,255,opt,name=base_resp,json=baseResp,proto3" json:"base_resp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PutObjectResp) Reset()         { *m = PutObjectResp{} }
func (m *PutObjectResp) String() string { return proto.CompactTextString(m) }
func (*PutObjectResp) ProtoMessage()    {}
func (*PutObjectResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_01f075bf486e7c38, []int{3}
}
func (m *PutObjectResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutObjectResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutObjectResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutObjectResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutObjectResp.Merge(m, src)
}
func (m *PutObjectResp) XXX_Size() int {
	return m.Size()
}
func (m *PutObjectResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PutObjectResp.DiscardUnknown(m)
}

var xxx_messageInfo_PutObjectResp proto.InternalMessageInfo

func (m *PutObjectResp) GetBaseResp() *base.BaseResp {
	if m != nil {
		return m.BaseResp
	}
	return nil
}

func init() {
	proto.RegisterType((*GetObjectReq)(nil), "oss.GetObjectReq")
	proto.RegisterType((*GetObjectResp)(nil), "oss.GetObjectResp")
	proto.RegisterType((*PutObjectReq)(nil), "oss.PutObjectReq")
	proto.RegisterType((*PutObjectResp)(nil), "oss.PutObjectResp")
}

func init() { proto.RegisterFile("oss.proto", fileDescriptor_01f075bf486e7c38) }

var fileDescriptor_01f075bf486e7c38 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xb1, 0x4e, 0xbc, 0x40,
	0x10, 0xc6, 0xff, 0xfc, 0xcf, 0x9c, 0xc7, 0x08, 0x46, 0xb7, 0x30, 0x97, 0x2b, 0x88, 0xc1, 0x46,
	0x13, 0x85, 0x04, 0x6b, 0x1b, 0x1a, 0x1b, 0x0d, 0x66, 0x89, 0x8d, 0x8d, 0x61, 0xc9, 0xc4, 0x3b,
	0x12, 0xdc, 0x85, 0xd9, 0x33, 0xf1, 0x4d, 0x7c, 0x24, 0x4b, 0x1f, 0xc1, 0xe0, 0x83, 0x68, 0x58,
	0xf0, 0xe4, 0x6c, 0xcc, 0x75, 0xdf, 0x0c, 0x7c, 0xbf, 0xf9, 0x76, 0x06, 0x6c, 0x49, 0x14, 0xa8,
	0x5a, 0x6a, 0xc9, 0x46, 0x92, 0x68, 0x06, 0x22, 0x23, 0xec, 0x1a, 0xfe, 0x35, 0x38, 0x97, 0xa8,
	0x13, 0x51, 0x60, 0xae, 0x39, 0x56, 0x8c, 0xc1, 0x96, 0xca, 0xf4, 0x7c, 0x6a, 0x1d, 0x5a, 0xc7,
	0x36, 0x37, 0x9a, 0x9d, 0xc0, 0xa4, 0x75, 0xdc, 0xd7, 0x58, 0x4d, 0x3f, 0xdb, 0x0f, 0x3b, 0x91,
	0x1b, 0x18, 0x46, 0x9c, 0x11, 0x72, 0xac, 0xf8, 0xb6, 0xe8, 0x84, 0x7f, 0x0b, 0xee, 0x00, 0x47,
	0x8a, 0x1d, 0xc0, 0x58, 0x9a, 0xca, 0x10, 0x1d, 0xde, 0x57, 0xec, 0x14, 0xec, 0x9e, 0x49, 0xea,
	0x1b, 0xba, 0x3b, 0x84, 0x92, 0xe2, 0x13, 0xd1, 0x2b, 0x1f, 0xc1, 0xb9, 0x59, 0xfe, 0x91, 0xf2,
	0x67, 0xd2, 0xff, 0xb5, 0x49, 0x1b, 0xa4, 0xbf, 0x00, 0x77, 0x30, 0x86, 0xd4, 0x66, 0x29, 0x23,
	0x0d, 0x90, 0xa4, 0x69, 0x8a, 0xf5, 0xd3, 0x22, 0x47, 0x16, 0x81, 0xbd, 0x5a, 0x05, 0xdb, 0x0f,
	0xda, 0x1b, 0x0c, 0x37, 0x3d, 0x63, 0xbf, 0x5b, 0xa4, 0x5a, 0xcf, 0x2a, 0x40, 0xef, 0x19, 0xbe,
	0xbb, 0xf7, 0xac, 0x65, 0x8c, 0xaf, 0x5e, 0x1b, 0xcf, 0x7a, 0x6b, 0x3c, 0xeb, 0xbd, 0xf1, 0xac,
	0x97, 0x0f, 0xef, 0x1f, 0xec, 0x65, 0x79, 0x80, 0xb2, 0xe8, 0x2e, 0xdc, 0x3a, 0xe2, 0x51, 0x92,
	0xa6, 0x77, 0x47, 0x0f, 0x0b, 0x3d, 0x5f, 0x8a, 0x20, 0x97, 0x65, 0x88, 0x19, 0x3d, 0x9f, 0xc9,
	0x22, 0xcc, 0x65, 0x59, 0xca, 0xc7, 0xd0, 0xfc, 0x19, 0x4a, 0x22, 0x31, 0x36, 0xf2, 0xfc, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0x1b, 0xc0, 0x90, 0x2d, 0x34, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OSSServiceClient is the client API for OSSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OSSServiceClient interface {
	GetObject(ctx context.Context, in *GetObjectReq, opts ...grpc.CallOption) (*GetObjectResp, error)
	PutObject(ctx context.Context, in *PutObjectReq, opts ...grpc.CallOption) (*PutObjectResp, error)
}

type oSSServiceClient struct {
	cc *grpc.ClientConn
}

func NewOSSServiceClient(cc *grpc.ClientConn) OSSServiceClient {
	return &oSSServiceClient{cc}
}

func (c *oSSServiceClient) GetObject(ctx context.Context, in *GetObjectReq, opts ...grpc.CallOption) (*GetObjectResp, error) {
	out := new(GetObjectResp)
	err := c.cc.Invoke(ctx, "/oss.OSSService/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSSServiceClient) PutObject(ctx context.Context, in *PutObjectReq, opts ...grpc.CallOption) (*PutObjectResp, error) {
	out := new(PutObjectResp)
	err := c.cc.Invoke(ctx, "/oss.OSSService/PutObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSSServiceServer is the server API for OSSService service.
type OSSServiceServer interface {
	GetObject(context.Context, *GetObjectReq) (*GetObjectResp, error)
	PutObject(context.Context, *PutObjectReq) (*PutObjectResp, error)
}

func RegisterOSSServiceServer(s *grpc.Server, srv OSSServiceServer) {
	s.RegisterService(&_OSSService_serviceDesc, srv)
}

func _OSSService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSSServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.OSSService/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSSServiceServer).GetObject(ctx, req.(*GetObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSSService_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSSServiceServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oss.OSSService/PutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSSServiceServer).PutObject(ctx, req.(*PutObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OSSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oss.OSSService",
	HandlerType: (*OSSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetObject",
			Handler:    _OSSService_GetObject_Handler,
		},
		{
			MethodName: "PutObject",
			Handler:    _OSSService_PutObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oss.proto",
}

func (m *GetObjectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetObjectReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOss(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.BaseReq != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintOss(dAtA, i, uint64(m.BaseReq.Size()))
		n1, err := m.BaseReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetObjectResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetObjectResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Object) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOss(dAtA, i, uint64(len(m.Object)))
		i += copy(dAtA[i:], m.Object)
	}
	if m.BaseResp != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintOss(dAtA, i, uint64(m.BaseResp.Size()))
		n2, err := m.BaseResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutObjectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutObjectReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOss(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Object) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOss(dAtA, i, uint64(len(m.Object)))
		i += copy(dAtA[i:], m.Object)
	}
	if m.BaseReq != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintOss(dAtA, i, uint64(m.BaseReq.Size()))
		n3, err := m.BaseReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutObjectResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutObjectResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BaseResp != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintOss(dAtA, i, uint64(m.BaseResp.Size()))
		n4, err := m.BaseResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintOss(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetObjectReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovOss(uint64(l))
	}
	if m.BaseReq != nil {
		l = m.BaseReq.Size()
		n += 2 + l + sovOss(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetObjectResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Object)
	if l > 0 {
		n += 1 + l + sovOss(uint64(l))
	}
	if m.BaseResp != nil {
		l = m.BaseResp.Size()
		n += 2 + l + sovOss(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutObjectReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovOss(uint64(l))
	}
	l = len(m.Object)
	if l > 0 {
		n += 1 + l + sovOss(uint64(l))
	}
	if m.BaseReq != nil {
		l = m.BaseReq.Size()
		n += 2 + l + sovOss(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutObjectResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseResp != nil {
		l = m.BaseResp.Size()
		n += 2 + l + sovOss(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOss(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOss(x uint64) (n int) {
	return sovOss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetObjectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetObjectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetObjectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseReq == nil {
				m.BaseReq = &base.BaseReq{}
			}
			if err := m.BaseReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOss
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetObjectResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetObjectResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetObjectResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOss
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Object = append(m.Object[:0], dAtA[iNdEx:postIndex]...)
			if m.Object == nil {
				m.Object = []byte{}
			}
			iNdEx = postIndex
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseResp == nil {
				m.BaseResp = &base.BaseResp{}
			}
			if err := m.BaseResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOss
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutObjectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutObjectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutObjectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOss
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Object = append(m.Object[:0], dAtA[iNdEx:postIndex]...)
			if m.Object == nil {
				m.Object = []byte{}
			}
			iNdEx = postIndex
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseReq == nil {
				m.BaseReq = &base.BaseReq{}
			}
			if err := m.BaseReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOss
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutObjectResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutObjectResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutObjectResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseResp == nil {
				m.BaseResp = &base.BaseResp{}
			}
			if err := m.BaseResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOss
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOss
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthOss
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOss
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOss(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthOss
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOss = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOss   = fmt.Errorf("proto: integer overflow")
)
