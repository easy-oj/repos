// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: repos.proto

package repos

import (
	context "context"
	fmt "fmt"
	base "github.com/easy-oj/common/proto/base"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateRepoReq struct {
	Uid                  int32             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Pid                  int32             `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Lid                  int32             `protobuf:"varint,3,opt,name=lid,proto3" json:"lid,omitempty"`
	Content              map[string]string `protobuf:"bytes,4,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BaseReq              *base.BaseReq     `protobuf:"bytes,255,opt,name=base_req,json=baseReq,proto3" json:"base_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateRepoReq) Reset()         { *m = CreateRepoReq{} }
func (m *CreateRepoReq) String() string { return proto.CompactTextString(m) }
func (*CreateRepoReq) ProtoMessage()    {}
func (*CreateRepoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2aa312430c575d9, []int{0}
}
func (m *CreateRepoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRepoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRepoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRepoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRepoReq.Merge(m, src)
}
func (m *CreateRepoReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateRepoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRepoReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRepoReq proto.InternalMessageInfo

func (m *CreateRepoReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CreateRepoReq) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CreateRepoReq) GetLid() int32 {
	if m != nil {
		return m.Lid
	}
	return 0
}

func (m *CreateRepoReq) GetContent() map[string]string {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *CreateRepoReq) GetBaseReq() *base.BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

type CreateRepoResp struct {
	Sid                  int32          `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	BaseResp             *base.BaseResp `protobuf:"bytes,255,opt,name=base_resp,json=baseResp,proto3" json:"base_resp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CreateRepoResp) Reset()         { *m = CreateRepoResp{} }
func (m *CreateRepoResp) String() string { return proto.CompactTextString(m) }
func (*CreateRepoResp) ProtoMessage()    {}
func (*CreateRepoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2aa312430c575d9, []int{1}
}
func (m *CreateRepoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRepoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRepoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRepoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRepoResp.Merge(m, src)
}
func (m *CreateRepoResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateRepoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRepoResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRepoResp proto.InternalMessageInfo

func (m *CreateRepoResp) GetSid() int32 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *CreateRepoResp) GetBaseResp() *base.BaseResp {
	if m != nil {
		return m.BaseResp
	}
	return nil
}

type FetchRepoReq struct {
	Uuid                 string        `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	BaseReq              *base.BaseReq `protobuf:"bytes,255,opt,name=base_req,json=baseReq,proto3" json:"base_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FetchRepoReq) Reset()         { *m = FetchRepoReq{} }
func (m *FetchRepoReq) String() string { return proto.CompactTextString(m) }
func (*FetchRepoReq) ProtoMessage()    {}
func (*FetchRepoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2aa312430c575d9, []int{2}
}
func (m *FetchRepoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchRepoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchRepoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchRepoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchRepoReq.Merge(m, src)
}
func (m *FetchRepoReq) XXX_Size() int {
	return m.Size()
}
func (m *FetchRepoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchRepoReq.DiscardUnknown(m)
}

var xxx_messageInfo_FetchRepoReq proto.InternalMessageInfo

func (m *FetchRepoReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *FetchRepoReq) GetBaseReq() *base.BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

type FetchRepoResp struct {
	Content              map[string]string `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BaseResp             *base.BaseResp    `protobuf:"bytes,255,opt,name=base_resp,json=baseResp,proto3" json:"base_resp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FetchRepoResp) Reset()         { *m = FetchRepoResp{} }
func (m *FetchRepoResp) String() string { return proto.CompactTextString(m) }
func (*FetchRepoResp) ProtoMessage()    {}
func (*FetchRepoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2aa312430c575d9, []int{3}
}
func (m *FetchRepoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchRepoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchRepoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchRepoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchRepoResp.Merge(m, src)
}
func (m *FetchRepoResp) XXX_Size() int {
	return m.Size()
}
func (m *FetchRepoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchRepoResp.DiscardUnknown(m)
}

var xxx_messageInfo_FetchRepoResp proto.InternalMessageInfo

func (m *FetchRepoResp) GetContent() map[string]string {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *FetchRepoResp) GetBaseResp() *base.BaseResp {
	if m != nil {
		return m.BaseResp
	}
	return nil
}

type UpdateRepoReq struct {
	Uuid                 string            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Content              map[string]string `protobuf:"bytes,2,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BaseReq              *base.BaseReq     `protobuf:"bytes,255,opt,name=base_req,json=baseReq,proto3" json:"base_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateRepoReq) Reset()         { *m = UpdateRepoReq{} }
func (m *UpdateRepoReq) String() string { return proto.CompactTextString(m) }
func (*UpdateRepoReq) ProtoMessage()    {}
func (*UpdateRepoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2aa312430c575d9, []int{4}
}
func (m *UpdateRepoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRepoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRepoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRepoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRepoReq.Merge(m, src)
}
func (m *UpdateRepoReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRepoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRepoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRepoReq proto.InternalMessageInfo

func (m *UpdateRepoReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *UpdateRepoReq) GetContent() map[string]string {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *UpdateRepoReq) GetBaseReq() *base.BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

type UpdateRepoResp struct {
	Sid                  int32          `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	BaseResp             *base.BaseResp `protobuf:"bytes,255,opt,name=base_resp,json=baseResp,proto3" json:"base_resp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UpdateRepoResp) Reset()         { *m = UpdateRepoResp{} }
func (m *UpdateRepoResp) String() string { return proto.CompactTextString(m) }
func (*UpdateRepoResp) ProtoMessage()    {}
func (*UpdateRepoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2aa312430c575d9, []int{5}
}
func (m *UpdateRepoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRepoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRepoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRepoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRepoResp.Merge(m, src)
}
func (m *UpdateRepoResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRepoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRepoResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRepoResp proto.InternalMessageInfo

func (m *UpdateRepoResp) GetSid() int32 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *UpdateRepoResp) GetBaseResp() *base.BaseResp {
	if m != nil {
		return m.BaseResp
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRepoReq)(nil), "repos.CreateRepoReq")
	proto.RegisterMapType((map[string]string)(nil), "repos.CreateRepoReq.ContentEntry")
	proto.RegisterType((*CreateRepoResp)(nil), "repos.CreateRepoResp")
	proto.RegisterType((*FetchRepoReq)(nil), "repos.FetchRepoReq")
	proto.RegisterType((*FetchRepoResp)(nil), "repos.FetchRepoResp")
	proto.RegisterMapType((map[string]string)(nil), "repos.FetchRepoResp.ContentEntry")
	proto.RegisterType((*UpdateRepoReq)(nil), "repos.UpdateRepoReq")
	proto.RegisterMapType((map[string]string)(nil), "repos.UpdateRepoReq.ContentEntry")
	proto.RegisterType((*UpdateRepoResp)(nil), "repos.UpdateRepoResp")
}

func init() { proto.RegisterFile("repos.proto", fileDescriptor_f2aa312430c575d9) }

var fileDescriptor_f2aa312430c575d9 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0x76, 0xda, 0xad, 0xbb, 0x79, 0xdb, 0x2e, 0x32, 0x56, 0x08, 0x39, 0x84, 0x35, 0x20, 0xac,
	0xa0, 0x09, 0x54, 0x10, 0x5d, 0x6f, 0x5d, 0xf4, 0x26, 0xc8, 0x88, 0x17, 0x2f, 0x92, 0x8f, 0x17,
	0x37, 0x6b, 0x9b, 0x99, 0x64, 0x92, 0x85, 0xfe, 0x13, 0x7f, 0x89, 0x27, 0xef, 0x7a, 0xf4, 0x27,
	0x48, 0x3d, 0xf9, 0x2b, 0x94, 0x99, 0xd9, 0xb4, 0x13, 0x8c, 0x87, 0x65, 0x0f, 0x7b, 0x7b, 0xe7,
	0xe1, 0xfd, 0x78, 0x9e, 0xa7, 0x4f, 0x03, 0xe3, 0x0a, 0x05, 0x97, 0xa1, 0xa8, 0x78, 0xcd, 0xe9,
	0x48, 0x3f, 0x3c, 0x48, 0x62, 0x89, 0x06, 0x0a, 0x7e, 0x13, 0x98, 0x9e, 0x56, 0x18, 0xd7, 0xc8,
	0x50, 0x70, 0x86, 0x25, 0xbd, 0x03, 0xc3, 0x26, 0xcf, 0x5c, 0x72, 0x44, 0x8e, 0x47, 0x4c, 0x95,
	0x0a, 0x11, 0x79, 0xe6, 0x0e, 0x0c, 0x22, 0x0c, 0xb2, 0xcc, 0x33, 0x77, 0x68, 0x90, 0x65, 0x9e,
	0xd1, 0x17, 0xb0, 0x9f, 0xf2, 0xa2, 0xc6, 0xa2, 0x76, 0xf7, 0x8e, 0x86, 0xc7, 0xe3, 0xf9, 0xfd,
	0xd0, 0x5c, 0xee, 0x2c, 0x0f, 0x4f, 0x4d, 0xcf, 0xcb, 0xa2, 0xae, 0xd6, 0xac, 0x9d, 0xa0, 0x0f,
	0xe1, 0x40, 0x51, 0xfa, 0x50, 0x61, 0xe9, 0xfe, 0x51, 0x87, 0xc7, 0xf3, 0x69, 0xa8, 0x49, 0x2e,
	0x62, 0x89, 0x0c, 0x4b, 0xb6, 0x9f, 0x98, 0xc2, 0x3b, 0x81, 0x89, 0xbd, 0x43, 0x31, 0xf9, 0x84,
	0x6b, 0xcd, 0xd6, 0x61, 0xaa, 0xa4, 0x33, 0x18, 0x5d, 0xc4, 0xcb, 0x06, 0x35, 0x5f, 0x87, 0x99,
	0xc7, 0xc9, 0xe0, 0x19, 0x09, 0xde, 0xc0, 0xa1, 0xcd, 0x46, 0x0a, 0x35, 0x2d, 0x77, 0x5a, 0x65,
	0x9e, 0xd1, 0x47, 0xe0, 0x5c, 0x52, 0x91, 0xa2, 0xe5, 0x72, 0x68, 0x73, 0x91, 0x82, 0x1d, 0x24,
	0x97, 0x55, 0xf0, 0x1a, 0x26, 0xaf, 0xb0, 0x4e, 0xcf, 0x5a, 0xef, 0x28, 0xec, 0x35, 0xad, 0x79,
	0x0e, 0xd3, 0xf5, 0x15, 0xc4, 0x05, 0x5f, 0x08, 0x4c, 0xad, 0x7d, 0x52, 0xd8, 0xb6, 0x92, 0x8e,
	0xad, 0x9d, 0xb6, 0xff, 0xd8, 0x7a, 0x25, 0x2d, 0xd7, 0x72, 0xf6, 0x1b, 0x81, 0xe9, 0x3b, 0x91,
	0x59, 0x29, 0xea, 0x73, 0xc2, 0x12, 0x33, 0xe8, 0x88, 0xe9, 0x8c, 0xde, 0x78, 0x46, 0x6c, 0x36,
	0xd7, 0xcf, 0xc8, 0xfc, 0x2b, 0x81, 0x89, 0x5a, 0x26, 0xdf, 0x62, 0x75, 0x91, 0xa7, 0x48, 0x9f,
	0x03, 0xec, 0x62, 0x48, 0x67, 0x7d, 0xff, 0x13, 0xef, 0x5e, 0x0f, 0x2a, 0x05, 0x7d, 0x0a, 0xce,
	0xf6, 0x87, 0xa7, 0x77, 0xff, 0x8d, 0x42, 0xe9, 0xcd, 0xfa, 0xf2, 0xa1, 0x4e, 0xee, 0x54, 0x6d,
	0x4f, 0x76, 0x6c, 0xdf, 0x9e, 0xec, 0xca, 0x5f, 0xb0, 0xef, 0x1b, 0x9f, 0xfc, 0xd8, 0xf8, 0xe4,
	0xe7, 0xc6, 0x27, 0x9f, 0x7f, 0xf9, 0xb7, 0x80, 0xc6, 0x69, 0x88, 0xfc, 0xdc, 0x7c, 0x40, 0xcc,
	0xd0, 0x62, 0xa4, 0x15, 0xbe, 0x7f, 0xf0, 0x31, 0xaf, 0xcf, 0x9a, 0x24, 0x4c, 0xf9, 0x2a, 0xc2,
	0x58, 0xae, 0x1f, 0xf3, 0xf3, 0x28, 0xe5, 0xab, 0x15, 0x2f, 0x22, 0xdd, 0x1d, 0xe9, 0xee, 0xe4,
	0xb6, 0x7e, 0x3c, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x42, 0x9e, 0xe4, 0x9d, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReposServiceClient is the client API for ReposService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReposServiceClient interface {
	CreateRepo(ctx context.Context, in *CreateRepoReq, opts ...grpc.CallOption) (*CreateRepoResp, error)
	FetchRepo(ctx context.Context, in *FetchRepoReq, opts ...grpc.CallOption) (*FetchRepoResp, error)
	UpdateRepo(ctx context.Context, in *UpdateRepoReq, opts ...grpc.CallOption) (*UpdateRepoResp, error)
}

type reposServiceClient struct {
	cc *grpc.ClientConn
}

func NewReposServiceClient(cc *grpc.ClientConn) ReposServiceClient {
	return &reposServiceClient{cc}
}

func (c *reposServiceClient) CreateRepo(ctx context.Context, in *CreateRepoReq, opts ...grpc.CallOption) (*CreateRepoResp, error) {
	out := new(CreateRepoResp)
	err := c.cc.Invoke(ctx, "/repos.ReposService/CreateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reposServiceClient) FetchRepo(ctx context.Context, in *FetchRepoReq, opts ...grpc.CallOption) (*FetchRepoResp, error) {
	out := new(FetchRepoResp)
	err := c.cc.Invoke(ctx, "/repos.ReposService/FetchRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reposServiceClient) UpdateRepo(ctx context.Context, in *UpdateRepoReq, opts ...grpc.CallOption) (*UpdateRepoResp, error) {
	out := new(UpdateRepoResp)
	err := c.cc.Invoke(ctx, "/repos.ReposService/UpdateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReposServiceServer is the server API for ReposService service.
type ReposServiceServer interface {
	CreateRepo(context.Context, *CreateRepoReq) (*CreateRepoResp, error)
	FetchRepo(context.Context, *FetchRepoReq) (*FetchRepoResp, error)
	UpdateRepo(context.Context, *UpdateRepoReq) (*UpdateRepoResp, error)
}

func RegisterReposServiceServer(s *grpc.Server, srv ReposServiceServer) {
	s.RegisterService(&_ReposService_serviceDesc, srv)
}

func _ReposService_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReposServiceServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repos.ReposService/CreateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReposServiceServer).CreateRepo(ctx, req.(*CreateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReposService_FetchRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReposServiceServer).FetchRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repos.ReposService/FetchRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReposServiceServer).FetchRepo(ctx, req.(*FetchRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReposService_UpdateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReposServiceServer).UpdateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repos.ReposService/UpdateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReposServiceServer).UpdateRepo(ctx, req.(*UpdateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReposService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "repos.ReposService",
	HandlerType: (*ReposServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepo",
			Handler:    _ReposService_CreateRepo_Handler,
		},
		{
			MethodName: "FetchRepo",
			Handler:    _ReposService_FetchRepo_Handler,
		},
		{
			MethodName: "UpdateRepo",
			Handler:    _ReposService_UpdateRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repos.proto",
}

func (m *CreateRepoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRepoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRepos(dAtA, i, uint64(m.Uid))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRepos(dAtA, i, uint64(m.Pid))
	}
	if m.Lid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRepos(dAtA, i, uint64(m.Lid))
	}
	if len(m.Content) > 0 {
		for k, _ := range m.Content {
			dAtA[i] = 0x22
			i++
			v := m.Content[k]
			mapSize := 1 + len(k) + sovRepos(uint64(len(k))) + 1 + len(v) + sovRepos(uint64(len(v)))
			i = encodeVarintRepos(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRepos(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintRepos(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.BaseReq != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintRepos(dAtA, i, uint64(m.BaseReq.Size()))
		n1, err := m.BaseReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateRepoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRepoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRepos(dAtA, i, uint64(m.Sid))
	}
	if m.BaseResp != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintRepos(dAtA, i, uint64(m.BaseResp.Size()))
		n2, err := m.BaseResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FetchRepoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchRepoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepos(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if m.BaseReq != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintRepos(dAtA, i, uint64(m.BaseReq.Size()))
		n3, err := m.BaseReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FetchRepoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchRepoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		for k, _ := range m.Content {
			dAtA[i] = 0xa
			i++
			v := m.Content[k]
			mapSize := 1 + len(k) + sovRepos(uint64(len(k))) + 1 + len(v) + sovRepos(uint64(len(v)))
			i = encodeVarintRepos(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRepos(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintRepos(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.BaseResp != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintRepos(dAtA, i, uint64(m.BaseResp.Size()))
		n4, err := m.BaseResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateRepoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRepoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepos(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.Content) > 0 {
		for k, _ := range m.Content {
			dAtA[i] = 0x12
			i++
			v := m.Content[k]
			mapSize := 1 + len(k) + sovRepos(uint64(len(k))) + 1 + len(v) + sovRepos(uint64(len(v)))
			i = encodeVarintRepos(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRepos(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintRepos(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.BaseReq != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintRepos(dAtA, i, uint64(m.BaseReq.Size()))
		n5, err := m.BaseReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateRepoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRepoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRepos(dAtA, i, uint64(m.Sid))
	}
	if m.BaseResp != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintRepos(dAtA, i, uint64(m.BaseResp.Size()))
		n6, err := m.BaseResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRepos(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateRepoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRepos(uint64(m.Uid))
	}
	if m.Pid != 0 {
		n += 1 + sovRepos(uint64(m.Pid))
	}
	if m.Lid != 0 {
		n += 1 + sovRepos(uint64(m.Lid))
	}
	if len(m.Content) > 0 {
		for k, v := range m.Content {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRepos(uint64(len(k))) + 1 + len(v) + sovRepos(uint64(len(v)))
			n += mapEntrySize + 1 + sovRepos(uint64(mapEntrySize))
		}
	}
	if m.BaseReq != nil {
		l = m.BaseReq.Size()
		n += 2 + l + sovRepos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateRepoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovRepos(uint64(m.Sid))
	}
	if m.BaseResp != nil {
		l = m.BaseResp.Size()
		n += 2 + l + sovRepos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchRepoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovRepos(uint64(l))
	}
	if m.BaseReq != nil {
		l = m.BaseReq.Size()
		n += 2 + l + sovRepos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchRepoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Content) > 0 {
		for k, v := range m.Content {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRepos(uint64(len(k))) + 1 + len(v) + sovRepos(uint64(len(v)))
			n += mapEntrySize + 1 + sovRepos(uint64(mapEntrySize))
		}
	}
	if m.BaseResp != nil {
		l = m.BaseResp.Size()
		n += 2 + l + sovRepos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRepoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovRepos(uint64(l))
	}
	if len(m.Content) > 0 {
		for k, v := range m.Content {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRepos(uint64(len(k))) + 1 + len(v) + sovRepos(uint64(len(v)))
			n += mapEntrySize + 1 + sovRepos(uint64(mapEntrySize))
		}
	}
	if m.BaseReq != nil {
		l = m.BaseReq.Size()
		n += 2 + l + sovRepos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRepoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovRepos(uint64(m.Sid))
	}
	if m.BaseResp != nil {
		l = m.BaseResp.Size()
		n += 2 + l + sovRepos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRepos(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRepos(x uint64) (n int) {
	return sovRepos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateRepoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRepoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRepoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lid", wireType)
			}
			m.Lid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRepos
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRepos
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRepos
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRepos
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRepos(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRepos
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Content[mapkey] = mapvalue
			iNdEx = postIndex
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseReq == nil {
				m.BaseReq = &base.BaseReq{}
			}
			if err := m.BaseReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRepos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRepoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRepoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRepoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseResp == nil {
				m.BaseResp = &base.BaseResp{}
			}
			if err := m.BaseResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRepos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchRepoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchRepoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchRepoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseReq == nil {
				m.BaseReq = &base.BaseReq{}
			}
			if err := m.BaseReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRepos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchRepoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchRepoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchRepoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRepos
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRepos
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRepos
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRepos
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRepos(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRepos
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Content[mapkey] = mapvalue
			iNdEx = postIndex
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseResp == nil {
				m.BaseResp = &base.BaseResp{}
			}
			if err := m.BaseResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRepos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRepoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRepoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRepoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRepos
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRepos
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRepos
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRepos
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRepos(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRepos
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Content[mapkey] = mapvalue
			iNdEx = postIndex
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseReq == nil {
				m.BaseReq = &base.BaseReq{}
			}
			if err := m.BaseReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRepos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRepoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRepoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRepoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseResp == nil {
				m.BaseResp = &base.BaseResp{}
			}
			if err := m.BaseResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRepos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRepos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRepos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRepos
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRepos
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRepos
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRepos(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRepos
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRepos = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRepos   = fmt.Errorf("proto: integer overflow")
)
